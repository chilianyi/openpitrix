// Code generated by go-swagger; DO NOT EDIT.

package runtime_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new runtime manager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runtime manager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRuntime creates runtime
*/
func (a *Client) CreateRuntime(params *CreateRuntimeParams) (*CreateRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRuntime",
		Method:             "POST",
		PathPattern:        "/v1/runtimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRuntimeOK), nil

}

/*
DeleteRuntimes deletes runtimes
*/
func (a *Client) DeleteRuntimes(params *DeleteRuntimesParams) (*DeleteRuntimesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRuntimesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRuntimes",
		Method:             "DELETE",
		PathPattern:        "/v1/runtimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRuntimesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRuntimesOK), nil

}

/*
DescribeRuntimeProviderZones describes runtime provider zones
*/
func (a *Client) DescribeRuntimeProviderZones(params *DescribeRuntimeProviderZonesParams) (*DescribeRuntimeProviderZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRuntimeProviderZonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeRuntimeProviderZones",
		Method:             "GET",
		PathPattern:        "/v1/runtimes/zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRuntimeProviderZonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeRuntimeProviderZonesOK), nil

}

/*
DescribeRuntimes describes runtime
*/
func (a *Client) DescribeRuntimes(params *DescribeRuntimesParams) (*DescribeRuntimesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeRuntimesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeRuntimes",
		Method:             "GET",
		PathPattern:        "/v1/runtimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DescribeRuntimesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DescribeRuntimesOK), nil

}

/*
GetRuntimeStatistics gets runtime statistics
*/
func (a *Client) GetRuntimeStatistics(params *GetRuntimeStatisticsParams) (*GetRuntimeStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRuntimeStatisticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRuntimeStatistics",
		Method:             "GET",
		PathPattern:        "/v1/runtimes/statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRuntimeStatisticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRuntimeStatisticsOK), nil

}

/*
ModifyRuntime modifies runtime
*/
func (a *Client) ModifyRuntime(params *ModifyRuntimeParams) (*ModifyRuntimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyRuntimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyRuntime",
		Method:             "PATCH",
		PathPattern:        "/v1/runtimes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyRuntimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyRuntimeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
